#include "/Engine/Private/Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

struct FMGGrassScatterInterpolantsVSToPS
{
	float4 Position : SV_POSITION;
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
};

#if VERTEXSHADER

void GrassScatterVS(
	FVertexFactoryInput Input,
	out FMGGrassScatterInterpolantsVSToPS Output
	)
{
	ResolvedView = ResolveView();

	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	half3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
	
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPosition.xyz, TangentToLocal);
	
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
	{
		WorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}
	float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPosition);
	float4 ScreenPos = mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip);
	
	Output.Position = ScreenPos;
}

#elif PIXELSHADER

float4 GrassScatterPS( 
	FMGGrassScatterInterpolantsVSToPS Interpolants
	OPTIONAL_IsFrontFace
	) : SV_Target0
{
	ResolvedView = ResolveView();

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants.FactoryInterpolants, Interpolants.Position);
	FPixelMaterialInputs PixelMaterialInputs;
	CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, Interpolants.Position, bIsFrontFace);

	float4 OutColor = 0;
#if NUM_MATERIAL_OUTPUTS_GETGRASSWEIGHT > 0
	OutColor.x = GetGrassWeight0(MaterialParameters);
#if NUM_MATERIAL_OUTPUTS_GETGRASSWEIGHT > 1
	OutColor.y = GetGrassWeight1(MaterialParameters);
#if NUM_MATERIAL_OUTPUTS_GETGRASSWEIGHT > 2
	OutColor.z = GetGrassWeight2(MaterialParameters);
#if NUM_MATERIAL_OUTPUTS_GETGRASSWEIGHT > 3
	OutColor.w = GetGrassWeight3(MaterialParameters);
#endif
#endif
#endif
#endif
	return OutColor;
}

#endif